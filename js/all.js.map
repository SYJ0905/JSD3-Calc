{"version":3,"sources":["all.js"],"names":["button","document","querySelectorAll","calcProcess","querySelector","calcResult","tempNumber","tempProcess","haveOutcome","e","preventDefault","contains","calcNumber","target","classList","calcOperation","inputNumber","textContent","allClear","lastOpeartor","calcNumberZero","includes","innerHTML","endsWith","slice","toCurrency","calcBack","addOperator","length","operator","getResult","tempProcessArray","replace","split","i","result","splice","calcProcessSequence","number2","number1","outPut","toString","Number","isNaN","num2","point1","point2","num1","max","Math","round","m","getResultNumber","toFixed","n","pow","num","parts","forEach","item","addEventListener","calcCheck"],"mappings":"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","file":"all.js","sourcesContent":["const button = document.querySelectorAll('.calc-button');\nconst calcProcess = document.querySelector('.calc-machine_header-process');\nconst calcResult = document.querySelector('.calc-machine_header-result');\nlet tempNumber = '';\nlet tempProcess = '';\nlet lastOpeartor = true; // 最後端是運算符\nlet haveOutcome = false;\n\n\nfunction calcCheck(e) {\n  e.preventDefault();\n  // 三種點擊狀態: 數字 、運算符、結果\n  if (e.target.classList.contains('number')) {\n    calcNumber(e);\n  } else if (e.target.classList.contains('operation')) {\n    calcOperation(e);\n  } else {\n    getResult(e);\n  }\n}\n\n// 輸入數字\nfunction calcNumber(e) {\n  const inputNumber = e.target.textContent;\n  if (haveOutcome) {\n    allClear();\n  }\n  // 最尾端是運算符接數字時初始化\n  if (lastOpeartor) {\n    tempNumber = '';\n  }\n  switch (inputNumber) {\n    case '0':\n      calcNumberZero(inputNumber);\n      break;\n    case '00':\n      calcNumberZero(inputNumber);\n      break;\n    case '.':\n      if (tempNumber.includes('.')) {\n        tempNumber += '';\n        tempProcess += '';\n      } else if (lastOpeartor) {\n        tempProcess += '0.';\n        tempNumber = '0.';\n      } else {\n        tempProcess += '.';\n        tempNumber += '.';\n      }\n      break;\n    default:\n      if (calcResult.innerHTML === '0') {\n        tempNumber = inputNumber;\n        // 避免先按 0 後接數字出現 \"01\" 狀況\n        if (tempProcess.endsWith('0')) {\n          tempProcess = tempProcess.slice(0, -1) + inputNumber;\n        } else {\n          tempProcess += inputNumber;\n        }\n      } else {\n        tempNumber += inputNumber;\n        tempProcess += inputNumber;\n      }\n      break;\n  }\n  calcResult.innerHTML = toCurrency(tempNumber);\n  calcProcess.innerHTML = toCurrency(tempProcess);\n  lastOpeartor = false;\n}\n\nfunction calcNumberZero(inputNumber) {\n  if (lastOpeartor || calcResult.innerHTML === '0') {\n    tempNumber = '0';\n    if (tempProcess.endsWith('0')) {\n      tempProcess += '';\n    } else {\n      tempProcess += '0';\n    }\n  } else {\n    tempNumber += inputNumber;\n    tempProcess += inputNumber;\n  }\n  return [tempNumber, tempProcess];\n}\n\n// 全清除、退一格、加入運算符\nfunction calcOperation(e) {\n  if (e.target.classList.contains('allClear')) {\n    allClear();\n  } else if (e.target.classList.contains('back')) {\n    calcBack();\n  } else {\n    addOperator(e);\n  }\n}\n\nfunction allClear() {\n  tempNumber = '';\n  tempProcess = '';\n  calcResult.innerHTML = 0;\n  calcProcess.innerHTML = tempProcess;\n  lastOpeartor = true;\n  haveOutcome = false;\n}\n\nfunction calcBack() {\n  if (haveOutcome) {\n    calcResult.innerHTML = 0;\n    haveOutcome = false;\n  }\n  if (tempProcess.endsWith(' ')) {\n    tempProcess = tempProcess.slice(0, -3);\n    lastOpeartor = false;\n  } else {\n    tempProcess = tempProcess.slice(0, -1);\n    tempNumber = tempNumber.slice(0, -1);\n  }\n  calcProcess.innerHTML = toCurrency(tempProcess);\n  if (tempProcess.endsWith(' ')) {\n    lastOpeartor = true;\n  }\n  if (tempNumber.length === 0) {\n    calcResult.innerHTML = 0;\n  } else {\n    calcResult.innerHTML = toCurrency(tempNumber);\n  }\n}\n\nfunction addOperator(e) {\n  const operator = e.target.textContent;\n  if (lastOpeartor) {\n    return;\n  }\n  if (tempProcess.endsWith('.')) {\n    tempProcess = tempProcess.slice(0, -1);\n  }\n  tempProcess += operator;\n  calcProcess.innerHTML = tempProcess;\n  lastOpeartor = true;\n  haveOutcome = false;\n}\n\nfunction getResult() {\n  if (lastOpeartor || haveOutcome) {\n    return;\n  }\n  // replace() 字串替換 + 正則表達( /欲替換者/g, '替換者' ) http://www.w3school.com.cn/js/jsref_replace.asp\n  const tempProcessArray = tempProcess.replace(/×/g, '*').replace(/÷/g, '/').replace(/−/g, '-').split(' ');\n  for (let i = 0; i < tempProcessArray.length; i += 2) {\n    let number1 = 0;\n    let number2 = 0;\n    let result = 0;\n    if (tempProcessArray.includes('*') || tempProcessArray.includes('/')) {\n      switch (tempProcessArray[i + 1]) {\n        case '*':\n          number1 = tempProcessArray[i];\n          number2 = tempProcessArray[i + 2];\n          result = calcProcessSequence(number1, number2, '*');\n          tempProcessArray.splice(i, 3, result);\n          i -= 2;\n          break;\n        case '/':\n          number1 = tempProcessArray[i];\n          number2 = tempProcessArray[i + 2];\n          result = calcProcessSequence(number1, number2, '/');\n          tempProcessArray.splice(i, 3, result);\n          i -= 2;\n          break;\n        default:\n          break;\n      }\n    } else {\n      i = 0;\n      switch (tempProcessArray[i + 1]) {\n        case '+':\n          number1 = tempProcessArray[i];\n          number2 = tempProcessArray[i + 2];\n          result = calcProcessSequence(number1, number2, '+');\n          tempProcessArray.splice(i, 3, result);\n          i -= 2;\n          break;\n        case '-':\n          number1 = tempProcessArray[i];\n          number2 = tempProcessArray[i + 2];\n          result = calcProcessSequence(number1, number2, '-');\n          tempProcessArray.splice(i, 3, result);\n          i -= 2;\n          break;\n        default:\n          break;\n      }\n    }\n  }\n  const outPut = tempProcessArray.toString();\n  if (Number.isNaN(outPut) || outPut === 'Infinity' || outPut === '-Infinity') {\n    calcResult.innerHTML = 0;\n    calcProcess.innerHTML = 'error';\n  } else {\n    calcResult.innerHTML = toCurrency(outPut);\n    calcProcess.innerHTML += ' = ';\n  }\n  haveOutcome = true;\n}\n\nfunction calcProcessSequence(number1, number2, operator) {\n  let num1 = number1;\n  let num2 = number2;\n  let point1 = 0; // 小數點後的位數\n  let point2 = 0; // 小數點後的位數\n  let m = 0;\n  let n = 0;\n  let getResultNumber = 0;\n  if (num1.toString().includes('.')) {\n    point1 = num1.toString().split('.')[1].length;\n  } else {\n    point1 = 0;\n  }\n  if (num2.toString().includes('.')) {\n    point2 = num2.toString().split('.')[1].length;\n  } else {\n    point2 = 0;\n  }\n  switch (operator) {\n    case '+':\n      m = Math.pow(10, Math.max(point1, point2));\n      getResultNumber = Math.round(num1 * m + num2 * m) / m;\n      break;\n    case '-':\n      m = Math.pow(10, Math.max(point1, point2));\n      n = (point1 >= point2) ? point1 : point2;\n      getResultNumber = (Math.round(num1 * m - num2 * m) / m).toFixed(n);\n      break;\n    case '*':\n      num1 = num1.toString().replace('.', '');\n      num2 = num2.toString().replace('.', '');\n      console.log(num1);\n      console.log(num2);\n      getResultNumber = (num1 * num2) / Math.pow(10, (point1 + point2));\n      break;\n    case '/':\n      num1 = num1.toString().replace('.', '');\n      num2 = num2.toString().replace('.', '');\n      getResultNumber = (num1 / num2) * Math.pow(10, (point2 - point1));\n      break;\n    default:\n      break;\n  }\n  return getResultNumber;\n}\n\nfunction toCurrency(num) {\n  const parts = num.toString().split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n}\n\n// 所有 button 綁定事件\nbutton.forEach((item) => {\n  item.addEventListener('click', calcCheck, false);\n});\n"]}